{"componentChunkName":"component---node-modules-hangindev-gatsby-theme-courses-src-templates-lesson-page-js","path":"/facebook_1_introducccion/04-how-to-store-and-use-bitcoins/","result":{"data":{"currentLesson":{"id":"0390123b-5fad-539c-974a-746a731c5ab4","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to Store and Use Bitcoins\",\n  \"youtubeId\": \"NKqHXoYZvMg\",\n  \"duration\": 4871\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"assignment-2-consensus-from-trust\"\n  }, \"Assignment 2: Consensus from trust\"), mdx(\"p\", null, \"For this assignment, you will design and implement a distributed consensus algorithm given a graph of \\u201Ctrust\\u201D relationships between nodes. This is an alternative method of resisting sybil attacks and achieving consensus; it has the benefit of not \\u201Cwasting\\u201D electricity like proof-of-work does.\"), mdx(\"p\", null, \"Nodes in the network are either compliant or malicious. You will write a CompliantNode class (which implements a provided Node interface) that defines the behavior of each of the compliant nodes. The network is a directed random graph, where each edge represents a trust relationship. For example, if there is an A \\u2192 B edge, it means that Node B listens to transactions broadcast by node A. We say that B is A\\u2019s follower and A is B\\u2019s followee.\"), mdx(\"p\", null, \"The provided Node class has the following API:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public interface Node {\\n  // NOTE: Node is an interface and does not have a constructor.\\n  // However, your CompliantNode.java class requires a 4 argument\\n  // constructor as defined in the provided CompliantNode.java.\\n  // This constructor gives your node information about the simulation\\n  // including the number of rounds it will run for.\\n\\n  /** {@code followees[i]} is true if this node follows node {@code i} */\\n  void setFollowees ( boolean [] followees);\\n\\n  /** initialize proposal list of transactions */\\n  void setPendingTransaction ( Set<Transaction> pendingTransactions);\\n\\n  /**\\n  * @return proposals to send to my followers. REMEMBER: After final round,\\n  * behavior of { @code getProposals} changes and it should return the\\n  * transactions upon which consensus has been reached.\\n  */\\n  Set<Transaction> sendToFollowers ();\\n  \\n  /** receive candidates from other nodes. */\\n  void receiveFromFollowees ( Set<Candidate> candidates);\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","title":"How to Store and Use Bitcoins","duration":4871,"youtubeId":"NKqHXoYZvMg","premium":"member only"}},"pageContext":{"id":"0390123b-5fad-539c-974a-746a731c5ab4","lesson":{"id":"0390123b-5fad-539c-974a-746a731c5ab4","title":"How to Store and Use Bitcoins","slug":"/facebook_1_introducccion/04-how-to-store-and-use-bitcoins/","duration":4871},"currentCourse":{"id":"18776d92-a9c6-583e-b7ec-4ee10133fe37","title":"Bitcoin and Cryptocurrency","slug":"/facebook_1_introducccion/","premium":"member only","lessons":[{"id":"1e7f1f1f-46a4-573f-a960-2cbf154b6627","title":"Facebook intro - nivel basico","slug":"/facebook_1_introducccion/01-intro/","duration":200},{"id":"c75e8717-2fc9-5bfb-b597-6cfd94ed1e5a","title":"How Bitcoin Achieves Decentralization","slug":"/facebook_1_introducccion/02-how-bitcoin-achieves-decentralization/","duration":4420},{"id":"94a040f6-7812-5918-ba7f-0399e936ae94","title":"Mechanics of Bitcoin","slug":"/facebook_1_introducccion/03-mechanics-of-bitcoin/","duration":4789},{"id":"0390123b-5fad-539c-974a-746a731c5ab4","title":"How to Store and Use Bitcoins","slug":"/facebook_1_introducccion/04-how-to-store-and-use-bitcoins/","duration":4871},{"id":"821d2b7c-337b-5c59-90f9-55b1993c07bc","title":"Bitcoin Mining","slug":"/facebook_1_introducccion/05-bitcoin-mining/","duration":5294},{"id":"0121b429-09f3-5c18-9d4b-48ad85c1ff5c","title":"Bitcoin and Anonymity","slug":"/facebook_1_introducccion/06-bitcoin-and-anonymity/","duration":6727},{"id":"91a608b5-888b-59d8-9fce-5db9abb4b4ff","title":"Community, Politics, and Regulation","slug":"/facebook_1_introducccion/07-community-politics-and-regulation/","duration":4357}]},"previousLesson":{"id":"94a040f6-7812-5918-ba7f-0399e936ae94","title":"Mechanics of Bitcoin","slug":"/facebook_1_introducccion/03-mechanics-of-bitcoin/","duration":4789},"nextLesson":{"id":"821d2b7c-337b-5c59-90f9-55b1993c07bc","title":"Bitcoin Mining","slug":"/facebook_1_introducccion/05-bitcoin-mining/","duration":5294},"premium":"member only"}},"staticQueryHashes":["3159585216","63159454"]}