{"expireTime":9007200819798512000,"key":"gatsby-plugin-mdx-entire-payload-25806bb10d8442dde15c2a5a3e34d7ea-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Team and Execution","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":22,"offset":22},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":22,"offset":22},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Sam Altman finishes up \"Ideas, Products, Teams and Execution\" by covering Team and Execution, in Lecture 2 of How to Start a Startup.","position":{"start":{"line":4,"column":1,"offset":24},"end":{"line":4,"column":134,"offset":157},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":24},"end":{"line":4,"column":134,"offset":157},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Team and Execution\",\"youtubeId\":\"CVfnkM44Urs\",\"duration\":2778}","position":{"start":{"line":6,"column":1,"offset":159},"end":{"line":6,"column":101,"offset":259},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":6,"column":101,"offset":259}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Team and Execution\",\n  \"youtubeId\": \"CVfnkM44Urs\",\n  \"duration\": 2778\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"team-and-execution\"\n  }, \"Team and Execution\"), mdx(\"p\", null, \"Sam Altman finishes up \\u201CIdeas, Products, Teams and Execution\\u201D by covering Team and Execution, in Lecture 2 of How to Start a Startup.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\"title\":\"Team and Execution\",\"youtubeId\":\"CVfnkM44Urs\",\"duration\":2778}\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"team-and-execution\"\n    }}>{`Team and Execution`}</h2>\n    <p>{`Sam Altman finishes up “Ideas, Products, Teams and Execution” by covering Team and Execution, in Lecture 2 of How to Start a Startup.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}