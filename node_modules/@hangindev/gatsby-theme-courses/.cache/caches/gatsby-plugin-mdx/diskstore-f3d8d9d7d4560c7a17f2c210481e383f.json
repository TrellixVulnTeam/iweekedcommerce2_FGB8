{"expireTime":9007200819798512000,"key":"gatsby-plugin-mdx-entire-payload-062a76d543ac31879fc212d989578ec8-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Assignment 1: ScroogeCoin","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":29,"offset":29},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":29,"offset":29},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You will be responsible for creating a file called ","position":{"start":{"line":4,"column":1,"offset":31},"end":{"line":4,"column":52,"offset":82},"indent":[]}},{"type":"inlineCode","value":"TxHandler.java","position":{"start":{"line":4,"column":52,"offset":82},"end":{"line":4,"column":68,"offset":98},"indent":[]}},{"type":"text","value":" that implements the following API:","position":{"start":{"line":4,"column":68,"offset":98},"end":{"line":4,"column":103,"offset":133},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":31},"end":{"line":4,"column":103,"offset":133},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"public class TxHandler {\n\n  /** Creates a public ledger whose current UTXOPool (collection of unspent\n  * transaction outputs) is utxoPool. This should make a defensive copy of\n  * utxoPool by using the UTXOPool(UTXOPool uPool) constructor.\n  */\n  public TxHandler (UTXOPool utxoPool);\n  \n  /** Returns true if\n  * (1) all outputs claimed by tx are in the current UTXO pool,\n  * (2) the signatures on each input of tx are valid,\n  * (3) no UTXO is claimed multiple times by tx,\n  * (4) all of tx’s output values are non-negative, and\n  * (5) the sum of tx’s input values is greater than or equal to the sum of\n  its output values; and false otherwise.\n  */\n  public boolean isValidTx (Transaction tx);\n  \n  /** Handles each epoch by receiving an unordered array of proposed\n  * transactions, checking each transaction for correctness,\n  * returning a mutually valid array of accepted transactions,\n  * and updating the current UTXO pool as appropriate.\n  */\n  public Transaction[] handleTxs (Transaction[] possibleTxs);\n}","position":{"start":{"line":6,"column":1,"offset":135},"end":{"line":32,"column":4,"offset":1168},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How Bitcoin Achieves Decentralization\",\"youtubeId\":\"q5GWwTgRIT4\",\"duration\":4420}","position":{"start":{"line":34,"column":1,"offset":1170},"end":{"line":34,"column":120,"offset":1289},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":34,"column":120,"offset":1289}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How Bitcoin Achieves Decentralization\",\n  \"youtubeId\": \"q5GWwTgRIT4\",\n  \"duration\": 4420\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"assignment-1-scroogecoin\"\n  }, \"Assignment 1: ScroogeCoin\"), mdx(\"p\", null, \"You will be responsible for creating a file called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TxHandler.java\"), \" that implements the following API:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public class TxHandler {\\n\\n  /** Creates a public ledger whose current UTXOPool (collection of unspent\\n  * transaction outputs) is utxoPool. This should make a defensive copy of\\n  * utxoPool by using the UTXOPool(UTXOPool uPool) constructor.\\n  */\\n  public TxHandler (UTXOPool utxoPool);\\n  \\n  /** Returns true if\\n  * (1) all outputs claimed by tx are in the current UTXO pool,\\n  * (2) the signatures on each input of tx are valid,\\n  * (3) no UTXO is claimed multiple times by tx,\\n  * (4) all of tx\\u2019s output values are non-negative, and\\n  * (5) the sum of tx\\u2019s input values is greater than or equal to the sum of\\n  its output values; and false otherwise.\\n  */\\n  public boolean isValidTx (Transaction tx);\\n  \\n  /** Handles each epoch by receiving an unordered array of proposed\\n  * transactions, checking each transaction for correctness,\\n  * returning a mutually valid array of accepted transactions,\\n  * and updating the current UTXO pool as appropriate.\\n  */\\n  public Transaction[] handleTxs (Transaction[] possibleTxs);\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\"title\":\"How Bitcoin Achieves Decentralization\",\"youtubeId\":\"q5GWwTgRIT4\",\"duration\":4420}\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"assignment-1-scroogecoin\"\n    }}>{`Assignment 1: ScroogeCoin`}</h2>\n    <p>{`You will be responsible for creating a file called `}<inlineCode parentName=\"p\">{`TxHandler.java`}</inlineCode>{` that implements the following API:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class TxHandler {\n\n  /** Creates a public ledger whose current UTXOPool (collection of unspent\n  * transaction outputs) is utxoPool. This should make a defensive copy of\n  * utxoPool by using the UTXOPool(UTXOPool uPool) constructor.\n  */\n  public TxHandler (UTXOPool utxoPool);\n  \n  /** Returns true if\n  * (1) all outputs claimed by tx are in the current UTXO pool,\n  * (2) the signatures on each input of tx are valid,\n  * (3) no UTXO is claimed multiple times by tx,\n  * (4) all of tx’s output values are non-negative, and\n  * (5) the sum of tx’s input values is greater than or equal to the sum of\n  its output values; and false otherwise.\n  */\n  public boolean isValidTx (Transaction tx);\n  \n  /** Handles each epoch by receiving an unordered array of proposed\n  * transactions, checking each transaction for correctness,\n  * returning a mutually valid array of accepted transactions,\n  * and updating the current UTXO pool as appropriate.\n  */\n  public Transaction[] handleTxs (Transaction[] possibleTxs);\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}