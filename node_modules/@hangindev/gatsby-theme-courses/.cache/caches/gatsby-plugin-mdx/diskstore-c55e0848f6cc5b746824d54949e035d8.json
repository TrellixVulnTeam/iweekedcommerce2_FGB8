{"expireTime":9007200819798512000,"key":"gatsby-plugin-mdx-entire-payload-5bdb56812d0a52ed8f4bba0ec962da83-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Assignment 2: Consensus from trust","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":38,"offset":38},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":38,"offset":38},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For this assignment, you will design and implement a distributed consensus algorithm given a graph of “trust” relationships between nodes. This is an alternative method of resisting sybil attacks and achieving consensus; it has the benefit of not “wasting” electricity like proof-of-work does.","position":{"start":{"line":4,"column":1,"offset":40},"end":{"line":4,"column":294,"offset":333},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":40},"end":{"line":4,"column":294,"offset":333},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Nodes in the network are either compliant or malicious. You will write a CompliantNode class (which implements a provided Node interface) that defines the behavior of each of the compliant nodes. The network is a directed random graph, where each edge represents a trust relationship. For example, if there is an A → B edge, it means that Node B listens to transactions broadcast by node A. We say that B is A’s follower and A is B’s followee.","position":{"start":{"line":6,"column":1,"offset":335},"end":{"line":6,"column":444,"offset":778},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":335},"end":{"line":6,"column":444,"offset":778},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The provided Node class has the following API:","position":{"start":{"line":8,"column":1,"offset":780},"end":{"line":8,"column":47,"offset":826},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":780},"end":{"line":8,"column":47,"offset":826},"indent":[]}},{"type":"code","lang":"java","meta":null,"value":"public interface Node {\n  // NOTE: Node is an interface and does not have a constructor.\n  // However, your CompliantNode.java class requires a 4 argument\n  // constructor as defined in the provided CompliantNode.java.\n  // This constructor gives your node information about the simulation\n  // including the number of rounds it will run for.\n\n  /** {@code followees[i]} is true if this node follows node {@code i} */\n  void setFollowees ( boolean [] followees);\n\n  /** initialize proposal list of transactions */\n  void setPendingTransaction ( Set<Transaction> pendingTransactions);\n\n  /**\n  * @return proposals to send to my followers. REMEMBER: After final round,\n  * behavior of { @code getProposals} changes and it should return the\n  * transactions upon which consensus has been reached.\n  */\n  Set<Transaction> sendToFollowers ();\n  \n  /** receive candidates from other nodes. */\n  void receiveFromFollowees ( Set<Candidate> candidates);\n}","position":{"start":{"line":10,"column":1,"offset":828},"end":{"line":34,"column":4,"offset":1786},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"How to Store and Use Bitcoins\",\"youtubeId\":\"NKqHXoYZvMg\",\"duration\":4871}","position":{"start":{"line":36,"column":1,"offset":1788},"end":{"line":36,"column":112,"offset":1899},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":36,"column":112,"offset":1899}}},"scopeImports":["import React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"How to Store and Use Bitcoins\",\n  \"youtubeId\": \"NKqHXoYZvMg\",\n  \"duration\": 4871\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"assignment-2-consensus-from-trust\"\n  }, \"Assignment 2: Consensus from trust\"), mdx(\"p\", null, \"For this assignment, you will design and implement a distributed consensus algorithm given a graph of \\u201Ctrust\\u201D relationships between nodes. This is an alternative method of resisting sybil attacks and achieving consensus; it has the benefit of not \\u201Cwasting\\u201D electricity like proof-of-work does.\"), mdx(\"p\", null, \"Nodes in the network are either compliant or malicious. You will write a CompliantNode class (which implements a provided Node interface) that defines the behavior of each of the compliant nodes. The network is a directed random graph, where each edge represents a trust relationship. For example, if there is an A \\u2192 B edge, it means that Node B listens to transactions broadcast by node A. We say that B is A\\u2019s follower and A is B\\u2019s followee.\"), mdx(\"p\", null, \"The provided Node class has the following API:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public interface Node {\\n  // NOTE: Node is an interface and does not have a constructor.\\n  // However, your CompliantNode.java class requires a 4 argument\\n  // constructor as defined in the provided CompliantNode.java.\\n  // This constructor gives your node information about the simulation\\n  // including the number of rounds it will run for.\\n\\n  /** {@code followees[i]} is true if this node follows node {@code i} */\\n  void setFollowees ( boolean [] followees);\\n\\n  /** initialize proposal list of transactions */\\n  void setPendingTransaction ( Set<Transaction> pendingTransactions);\\n\\n  /**\\n  * @return proposals to send to my followers. REMEMBER: After final round,\\n  * behavior of { @code getProposals} changes and it should return the\\n  * transactions upon which consensus has been reached.\\n  */\\n  Set<Transaction> sendToFollowers ();\\n  \\n  /** receive candidates from other nodes. */\\n  void receiveFromFollowees ( Set<Candidate> candidates);\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\"title\":\"How to Store and Use Bitcoins\",\"youtubeId\":\"NKqHXoYZvMg\",\"duration\":4871}\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"assignment-2-consensus-from-trust\"\n    }}>{`Assignment 2: Consensus from trust`}</h2>\n    <p>{`For this assignment, you will design and implement a distributed consensus algorithm given a graph of “trust” relationships between nodes. This is an alternative method of resisting sybil attacks and achieving consensus; it has the benefit of not “wasting” electricity like proof-of-work does.`}</p>\n    <p>{`Nodes in the network are either compliant or malicious. You will write a CompliantNode class (which implements a provided Node interface) that defines the behavior of each of the compliant nodes. The network is a directed random graph, where each edge represents a trust relationship. For example, if there is an A → B edge, it means that Node B listens to transactions broadcast by node A. We say that B is A’s follower and A is B’s followee.`}</p>\n    <p>{`The provided Node class has the following API:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public interface Node {\n  // NOTE: Node is an interface and does not have a constructor.\n  // However, your CompliantNode.java class requires a 4 argument\n  // constructor as defined in the provided CompliantNode.java.\n  // This constructor gives your node information about the simulation\n  // including the number of rounds it will run for.\n\n  /** {@code followees[i]} is true if this node follows node {@code i} */\n  void setFollowees ( boolean [] followees);\n\n  /** initialize proposal list of transactions */\n  void setPendingTransaction ( Set<Transaction> pendingTransactions);\n\n  /**\n  * @return proposals to send to my followers. REMEMBER: After final round,\n  * behavior of { @code getProposals} changes and it should return the\n  * transactions upon which consensus has been reached.\n  */\n  Set<Transaction> sendToFollowers ();\n  \n  /** receive candidates from other nodes. */\n  void receiveFromFollowees ( Set<Candidate> candidates);\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}